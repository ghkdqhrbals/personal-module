name: Manual Publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "버전 증가 유형 (major/minor/patch)"
        type: choice
        required: true
        options: [patch, minor, major]
      create_release:
        description: "GitHub Release 생성 여부"
        type: boolean
        default: true
        required: true

permissions:
  contents: write      # 태그/릴리스 푸시
  packages: write      # GitHub Packages publish
  pull-requests: read

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Determine base version
        id: version
        run: |
          set -e
          # 최신 태그(vX.Y.Z) 조회
          LATEST_TAG=$(git tag --list 'v*' | sort -V | tail -n1 || true)
          if [ -n "$LATEST_TAG" ]; then
            BASE_VERSION=${LATEST_TAG#v}
          else
            # 태그 없으면 build.gradle.kts 에서 초기 version 사용
            BASE_VERSION=$(grep -E '^version\s*=\s*"[0-9]+\.[0-9]+\.[0-9]+"' build.gradle.kts | head -n1 | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          fi
          echo "Base version: $BASE_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor)
              MINOR=$((MINOR+1)); PATCH=0 ;;
            patch)
              PATCH=$((PATCH+1)) ;;
            *) echo "Unknown release_type"; exit 1 ;;
          esac
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Publish to GitHub Packages
        run: ./gradlew publish -PartifactVersion=${NEW_VERSION} --no-daemon
        env:
          PACKAGES_ACTOR: ${{ github.actor }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a ${NEW_VERSION} -m "Release ${NEW_VERSION}"
          git push origin ${NEW_VERSION}

      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: v${{ env.NEW_VERSION }}
          body: |
            자동 발행된 릴리스
            - 유형: ${{ github.event.inputs.release_type }}
            - 버전: v${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

      - name: Summary
        run: |
          echo "## Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Release Type: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- New Version: v${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY

      - name: Send GitHub Action trigger data to Slack workflow
        if: always()
        uses: ghkdqhrbals/slack-list@v1.0.12
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          actor: ${{ github.actor }}
          messages: >
            ["Publish Result: ${{ job.status == 'success' && 'SUCCESS' || (job.status == 'cancelled' && 'CANCELLED' || 'FAILURE') }}",
             "Version: v${{ env.NEW_VERSION }}",
             "Release Type: ${{ github.event.inputs.release_type }}",
             "Create Release: ${{ github.event.inputs.create_release }}"]
          message-title: 'Manual Publish Notification'
          color: ${{ job.status == 'success' && '#3bb143' || (job.status == 'cancelled' && '#ffaa00' || '#ff4d4f') }}
